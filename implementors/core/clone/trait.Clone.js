(function() {var implementors = {};
implementors["egg"] = [{"text":"impl&lt;L:&nbsp;Clone, D:&nbsp;Clone&gt; Clone for EClass&lt;L, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone + Language, N:&nbsp;Clone + Analysis&lt;L&gt;&gt; Clone for EGraph&lt;L, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Data: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone&gt; Clone for RecExpr&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SymbolLang","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone&gt; Clone for Pattern&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone&gt; Clone for ENodeOrVar&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Rewrite&lt;L, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for ConditionalApplier&lt;C, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for StopReason","synthetic":false,"types":[]},{"text":"impl&lt;IterData:&nbsp;Clone&gt; Clone for Iteration&lt;IterData&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Var","synthetic":false,"types":[]},{"text":"impl Clone for Subst","synthetic":false,"types":[]},{"text":"impl Clone for Symbol","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()