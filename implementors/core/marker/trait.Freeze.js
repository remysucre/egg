(function() {var implementors = {};
implementors["egg"] = [{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, N&gt; Freeze for Dot&lt;'a, L, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, D&gt; Freeze for EClass&lt;L, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, N&gt; Freeze for EGraph&lt;L, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, CF, L, N&gt; Freeze for Extractor&lt;'a, CF, L, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CF: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AstSize","synthetic":true,"types":[]},{"text":"impl Freeze for AstDepth","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Freeze for RecExpr&lt;L&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolLang","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Freeze for Pattern&lt;L&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SearchMatches","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2&gt; Freeze for ConditionEqual&lt;A1, A2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;A2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, A&gt; Freeze for ConditionalApplier&lt;C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, N&gt; Freeze for Rewrite&lt;L, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, N, IterData&gt; Freeze for Runner&lt;L, N, IterData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IterData&gt; Freeze for Iteration&lt;IterData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IterData: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleScheduler","synthetic":true,"types":[]},{"text":"impl Freeze for BackoffScheduler","synthetic":true,"types":[]},{"text":"impl Freeze for Subst","synthetic":true,"types":[]},{"text":"impl Freeze for Var","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Freeze for ENodeOrVar&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StopReason","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()