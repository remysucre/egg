(function() {var implementors = {};
implementors["egg"] = [{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, N&gt; !RefUnwindSafe for Dot&lt;'a, L, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, D&gt; RefUnwindSafe for EClass&lt;L, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, N&gt; !RefUnwindSafe for EGraph&lt;L, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, CF, L, N&gt; !RefUnwindSafe for Extractor&lt;'a, CF, L, N&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AstSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AstDepth","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for RecExpr&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymbolLang","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for Pattern&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SearchMatches","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2&gt; RefUnwindSafe for ConditionEqual&lt;A1, A2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;A2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, A&gt; RefUnwindSafe for ConditionalApplier&lt;C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, N&gt; !RefUnwindSafe for Rewrite&lt;L, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, N, IterData&nbsp;=&nbsp;()&gt; !RefUnwindSafe for Runner&lt;L, N, IterData&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IterData&gt; RefUnwindSafe for Iteration&lt;IterData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IterData: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleScheduler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackoffScheduler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Var","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for ENodeOrVar&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StopReason","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()